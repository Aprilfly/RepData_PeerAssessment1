match(X,tablename)
match(tablename,X)
str(GDP)
Granking<-select(GDP,X,Gross.domestic.product.2012)
Granking
head(Granking)
class(Granking)
Granking[195,]
Granking[194,]
Granking[5:194,]
Granking<-Granking[5:194,]
arrange(Granking,Granking$Gross.domestic.product.2012)
arrange(Granking,Gross.domestic.product.2012)
Granking
head(GDP$X)
head(EDSTATS$CountryCode)
X<-GPD$X
X<-GDP$X
X<-X[X!=""]
X
length(X)
CC<-EDSTATS$CountryCode
CC
class(X)
class(CC)
X<-unlist(X)
X<-as.vector(X,mode="character")
class(X)
CC<-unlist(CC)
CC<-as.vector(CC,mode="character")
class(CC)
match(X,CC)
match(CC,X)
length(match(CC,X))
length(match(X,CC))
X<-GDP$X
X<-X[5:194,]
X[5:194,]
X
X[5,]
class(X)
X<-unlist(X)
X<-as.vector(X,mode="character")
X
X[5,194,]
X[5:194,]
X[,5:194]
X<-X[X!=""]
X
X[1:194,]
class(X)
X[1,]
X[1]
X[1:194]
X[1:190]
X<-X[1:190]
match(X,CC)
length(match(X,CC))
match(X,CC)
match<-match(X,CC)
match[!is.na(match)]
match<-match[!is.na(match)]
length(match)
head(GPD)
head(GDP)
q3<-select(GDP,X,X.2)
head(q3)
q3[5:194,]
q()
library(httr)
oauth_endpoints("github")
outcome<-read.csv("E:/Cousera-Data Science/Rprogramming_week4_assignment/rprog-data-ProgAssignment3-data/outcome-of-care-measures",colClasses="character")
outcome<-read.csv("E:/Cousera-Data Science/Rprogramming_week4_assignment/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses="character")
head(outcome)
names(outcome)
ncol(outcome)
nrow(outcome)
outcome[,11]<-as.numeric(outcome[,11])
hist(outcome[,11])
hist(outcome[,11])
head(outcome)
state<-outcome$State
head(state)
table(state)
state_category<-table(state)
names(state_category)
state_name<-names(state_category)
class(state_name)
state_name[1]
state_name[2]
"AK" %in% state_name
Qexist<-"AK" %in% state_name
?stop
iter<-12
try(if(iter>10)stop("too many iterations"))
head(outcome)
heartattack<-select(outcome,Hospital.Name,State,outcome[,11])
library(dplyr)
heartattack<-select(outcome,Hospital.Name,State,outcome[,11])
heartattack<-outcome[,11]
head(heartattack)
outcome$State[outcome$State=="AL"]
heartattack<-select(outcome,Hospital.Name,State)
heartattack<-select(outcome,Hospital.Name,State, Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
heartattack<-select(outcome,Hospital.Name,State=="AL", !is.na(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
heartattack<-filter(outcome,Hospital.Name,State=="AL", !is.na(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
heartattack<-filter(outcome,Hospital.Name,outcome$State=="AL", outcome$!is.na(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
heartattack<-filter(outcome,Hospital.Name,outcome$State=="AL", !is.na(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
heartattack<-select(outcome,Hospital.Name,State)
head(heartattack)
class(outcome)
heartattack<-filter(outcome,Hospital.Name,State=="AL")
heartattack<-filter(outcome,Hospital.Name,outcome$State=="AL")
str(outcome)
?filter
heartattack<-filter(outcome,outcome$State=="AL")
heartattack<-filter(outcome,is.na(Hospital.Name),outcome$State=="AL", !is.na(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
head(heartattack)
heartattack<-filter(outcome,!is.na(Hospital.Name),outcome$State=="AL", !is.na(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
head(heartattack)
str(heartattack)
heartattack<-filter(outcome,!is.na(Hospital.Name),outcome$State=="AL", !is.na(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
min_rate_ha<-apply(heartattack$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,2,min)
MR<-heartattack$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
head(MR)
length(MR)
MR
class(MR)
min(MR)
MR[MR==min(MR)]
Hospital.Name[MR==min(MR)]
heartattack$Hospital.Name[MR==min(MR)]
setwd("E:/Cousera-Data Science
/Rprogramming_week4_assignment/rprog-data-ProgAssignment3-data")
q()
swirl()
library(swirl)
swirl()
abline(v=median(ppm),col="magenta",lwd=4)
head(pollution)
names(pollution)
reg<-pollution$region
reg<-table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pollution,col="red")
boxplot(pm25~region,pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution,region=="east")
head(east)
hist(pm25,col="green")
hist(east$pm25,col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
plot(pollution,latitude,pm25)
plot(pollution,latitude~pm25)
skip()
abline(lwd=2,lty=2)
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
subset(pollution,region=="west")
west<-subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="east")
plot(east$latitude,east$pm25,main="East")
?Devices
with(faithful,plot=(eruptions,waiting))
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,file="geyserplot.png")
dev.cur()
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income|region,data=state,layout=c(4,1))
xyplot(Life.Exp~Income|region,data=state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
gplot(displ,hwy,mpg)
library(gplot)
install.packages(gplot)
install.packages(ggplot2)
install.packages(gplots)
install.packages("gplots")
library(gplots)
gplot(displ,hwy,data=mpg)
gplots(displ,hwy,data=mpg)
library(gplots)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone(ppb)",col.axis="blue",col.lable="red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone(ppb)",col.axis="blue",col.lable="red")
skip()
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
may<-subset(airquality,month="may")
may<-subset(airquality,Month=5)
may<-subset(airquality,Month==5)
plot(Wind~Ozone,may)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=16)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",c(17,8),c("blue","red"),c("May","Other Months"))
skip()
skip()
par(mfrow(c(1,2)))
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow=c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Solar.R,airquality$Ozone,main="Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
q()
pnorm(70,,mean=80,sd=10,lower.tail=TRUE)
pnorm(70,mean=80,sd=10,lower.tail=TRUE)
qnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=7.5)
ppois(10,lambda=15)
data(sleep)
head(sleep)
library(datasets)
data(ChickWeight)
library(reshape2)
head(ChickWeight)
wideCW<-dcast(ChickWeight,Diet+Chick~Time,value.var="weight")
head(wideCW)
?dcast
nrow(wideCW)
wideCW
ChickWeight
names(wideCW)[-(1:2)]<-paste("time",names(wideCW)[-(1:2)],sep="")
head(wideCW)
library(dplyr)
wideCW<-mutate(wideCW,gain=time21-time0)
head(wideCW)
q()
setwd("E:/Cousera-Data Science/Reproducible Research/CourseProject1/repdata-data-activity")
activity<-read.csv("activity.csv")
head(activity)
str(activity)
table(activity$steps)
summary(is.na(activity$steps))
sum(is.na(activity$steps))
sum(is.na(activity$steps))/nrow(activity)
nrow(activity)
head(activity)
tail(activity)
tail(activity,10)
head(activity,10)
head(activity[!is.na(activity$steps)])
head(activity[!is.na(activity$steps),])
nrow(activity[!is.na(activity$steps),])
activity1<-activity[!is.na(activity$steps),]
library("plyr")
ddplyr(activity1,.(data),function(x)sum(x$steps))
dpplyr(activity1,.(data),function(x)sum(x$steps))
ddply(activity1,.(data),function(x)sum(x$steps))
ddply(activity1,.(date),function(x)sum(x$steps))
steps_num<-ddply(activity1,.(date),function(x)sum(x$steps))
hist(steps_num)
hist(steps_num$V1)
hist(steps_num$V1,xlab="the total number of steps taken each day")
hist(steps_num$V1,main=paste("Histogram of","the total number of steps taken each day"),xlab="the total number of steps taken each day")
hist(steps_num$V1,main=paste("Histogram of","the total number of steps taken each day"))
mean_steps<-mean(steps_num$V1)
mean_steps
mean_steps<-summary(steps_num$V1)
mean_steps
class(mean_steps)
mean_steps$Median
mean_steps[,Median]
mean_steps[,"Median"]
mean_steps["Median"]
mean_steps["Mean"]
summary_steps<-summary(steps_num$V1)
median_steps<-summary_steps["Median"]
mean_steps<-summary_steps["Mean"]
mean_steps
median_steps
head(activity)
head(activity1)
table(activity1$date)
range(activity1$interval)
ddply(activity1,.(interval),function(x) mean(x$steps))
pattern<-ddply(activity1,.(interval),function(x) mean(x$steps))
plot(pattern)
plot(pattern,xlab="Time Interval(mins)",ylab="Average Taken Steps",main="The Average Daily Activity Pattern")
head(activity[activity1$date="2012-10-02",])
head(activity[activity1$date=="2012-10-02",])
head(activity1[activity1$date=="2012-10-02",])
activity1[activity1$date=="2012-10-02",]
nrow(activity1[activity1$date=="2012-10-02",])
head(pattern)
max(pattern$V1)
which(max(pattern$V1))
which(pattern==max(pattern$V1))
pattern$interval[ which(pattern==max(pattern$V1))]
pattern$interval[which(pattern==max(pattern$V1)),]
pattern$interval[which(pattern==max(pattern$V1))]
pattern$interval[1]
pattern$interval[2]
pattern$interval[which(pattern==max(pattern$V1))]
pattern$interval
class(which(pattern==max(pattern$V1)))
pattern$interval[which(pattern$V1==max(pattern$V1))]
which(pattern$V1==max(pattern$V1))
pattern[104]
pattern[104,]
interval_max<-pattern$interval[which(pattern$V1==max(pattern$V1))]
head(pattern)
head(activity$steps)
head(activity)
head(activity[which(is.na(activity$steps)),])
activity[which(is.na(activity$steps)),]$interval
activity[which(is.na(activity$steps)),]$steps
length(activity[which(is.na(activity$steps)),]$steps)
length(activity[which(is.na(activity$steps)),]$interval)
activity[which(is.na(activity$steps)),]$steps<-pattern$V1[activity[which(is.na(activity$steps)),]$interval]
length(pattern$V1[activity[which(is.na(activity$steps)),]$interval])
length(activity[which(is.na(activity$steps)),]$interval)
length(pattern$V1[activity[which(is.na(activity$steps)),]$interval])
length(pattern$V1[which(activity[which(is.na(activity$steps)),]$interval)])
which(activity[which(is.na(activity$steps)),]$interval)
which(pattern$interval==activity[which(is.na(activity$steps)),]$interval)
pattern$V1[which(pattern$interval==activity[which(is.na(activity$steps)),]$interval),]
which(is.na(activity$steps))
length(which(is.na(activity$steps)))
which_na<-which(is.na(activity$steps))##the percent of NA in records
activity[which_na,]$interval
filter(pattern,interval==which_interval)
filter(pattern,interval)
filter(pattern,pattern$interval)
filter(pattern,pattern$interval==which_interval)
head(which_interval)
head(whichinterval)
whichinterval<-activity[which_na,]$interval
head(whichinterval)
filter(pattern,pattern$interval==whichinterval)
which(pattern$interval==whichinterval)
head(pattern$interval)
nrow(pattern$interval)
length(pattern$interval)
pattern
head(whichinterval)
pattern$V1[pattern$interval==0,]
pattern$V1[pattern$interval==0]
pattern$V1[pattern$interval==whichinterval]
pattern$interval==whichinterval
sapply(whichinterval,function(x){which(pattern$interval==x)})
inx<-sapply(whichinterval,function(x){which(pattern$interval==x)})
fillNA<-pattern[inx,]$V1
head(fillNA)
length(fillNA)
length(inx)
length(which_na)
head(activity[which_na])
head(activity[which_na,])
activity[which_na,]$steps<-fillNA
head(activity)
which(is.na(activity$steps))
ddply(activity,.(date), function(x) mean(x$steps))
total_steps<-ddply(activity,.(date), function(x) mean(x$steps))
hist(total_steps$V1)
hist(total_steps$V1,xlab="the total number of steps taken each day",main="The total number of steps taken each day")
allinfo2<-summary(total_steps)
allinfo2<-summary(total_steps$V1)
allinfo2
median<-allinfo2["Median"]
mean<-allinfo2["Mean"]
median_steps
mean_steps
median
mean
allinfo
steps_num
allinfo<-summary(steps_num$V1)
median_steps<-allinfo["Median"]
mean_steps<-allinfo["Mean"]
allinfo
allinfo2
total_steps<-ddply(activity,.(date), function(x) sum(x$steps))
hist(total_steps$V1,xlab="the total number of steps taken each day",main="The total number of steps taken each day")
allinfo2<-summary(total_steps$V1)
median<-allinfo2["Median"]
mean<-allinfo2["Mean"]
allinfo
allinfo2
head(activity)
weekdays("2012-10-01")
weekdays(2012-10-01)
?weekdays
weekdays(2012-10-01,%Y%m%d)
class(activity$date)
test<-as.Date("2012-10-01")
weekdays(test)
test<-as.Date("2012-09-30")
weekdays(test)
library(chron)
is.weekend(test)
date<-as.Date(activity$date)
length(is.weekend(date))
head(is.weekend(date))
?mutate
mutate(activity,weekday/weekend)
head(activity)
mutate(activity,weekday/weekend=0)
activity$week<-is.weekend(date)
head(activity$week)
head(activity)
activity$week<-!is.weekend(date)
activity$week
activity$week<-!is.weekend(date)
head(activity$week)
head(date)
activity$week[is.weekend(date),]<-"weekend"
activity$week[!is.weekend(date),]<-"weekday"
activity$week<-c(0,each=length(activity))
head(activity)
c(0,each=4)
rep(0,each=4)
activity$week<-rep(0,each=length(activity))
head(activity)
activity$week[is.weekend(date),]<-"weekend"
length(is.weekend(date))
length(activity)
nrow(activity)
activity$week[is.weekend(date)]<-"weekend"
activity$week[is.weekend(date)]<-"weekend"
activity$week[!is.weekend(date)]<-"weekday"
head(activity)
class(activity$week)
as.factor(activity$week)
class(activity$week)
activity$week<-as.factor(activity$week)
head(activity)
class(activity$week)
plot(pattern,xlab="Time Interval(mins)",ylab="Average Taken Steps",main="The Average Daily Activity Pattern",type="1")
plot(pattern,xlab="Time Interval(mins)",ylab="Average Taken Steps",main="The Average Daily Activity Pattern",type="l")
pattern2<-ddply(activity,.(interval,week),function(x) mean(x$steps))
plot(pattern2)
head(pattern2)
ddply(pattern2,.(week),function(x) plot(x$interval,x$V1))
plot(pattern2$interval,pattern2$V1)
filter(pattern2,week="weekday")
filter(pattern2,week=="weekday")
filter(pattern2,week==as.factor("weekday"))
filter(pattern2,pattern2$week=="weekday")
class(pattern2$week)
filter(pattern2,pattern2$week==as.factor("weekday"))
head(pattern2)
plot(pattern2$interval,pattern2$V1,data=pattern2[pattern2$week==as.factor("weekday")])
data1<-pattern2[pattern2$week==as.factor("weekday")]
as.factor("weekday")
class(as.factor("weekday"))
pattern2$week
ddply(pattern2,.(week),function(x) plot(x$interval,x$V1))
ddply(pattern2,.(week),function(x) plot(x$interval,x$V1,color=x$week))
ddply(pattern2,.(week),function(x) plot(x$interval,x$V1,type="l"))
pattern2$week==as.factor("weekend")
identical(pattern2$week,as.factor("weekend"))
pattern2$week=="weekend"
pattern2[pattern2$week=="weekend"]
pattern2[pattern2$week=="weekend",]
data_weekend<-pattern2[pattern2$week=="weekend",]
data_weekday<-pattern2[pattern2$week=="weekday",]
plot(data_weekend$interval,data_weekend%V1)
plot(interval,V1,data=data_weekend)
plot(data_weekend$interval,data_weekend$V1)
plot(data_weekend$interval,data_weekend$V1,type="l")
plot(data_weekday$interval,data_weekday$V1,type="l")
plot(data_weekend$interval,data_weekend$V1,type="l",xlab="interval",ylab="average steps taken across the weekend")
plot(data_weekday$interval,data_weekday$V1,type="l",xlab="interval",ylab="average steps taken across the weekday")
par(mfrow=c(2,1))
plot(data_weekday$interval,data_weekday$V1,type="l",xlab="interval",ylab="average steps taken across the weekday")
plot(data_weekend$interval,data_weekend$V1,type="l",xlab="interval",ylab="average steps taken across the weekend")
par(mfrow=c(2,1))
plot(data_weekend$interval,data_weekend$V1,type="l",xlab="interval",ylab="average steps taken across the weekend")
plot(data_weekday$interval,data_weekday$V1,type="l",xlab="interval",ylab="average steps taken across the weekday")
install.packages("plyr")
library("plyr")
q()
